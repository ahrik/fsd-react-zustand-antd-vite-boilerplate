/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * Full API - Users, Sessions, Tasks
 * API for managing users, sessions, tasks
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from './api-instance';
import type { BodyType } from './api-instance';
export type SuccessResponseData = { [key: string]: unknown };

export type SuccessResponse = {
  data?: SuccessResponseData;
  /** @nullable */
  error?: string | null;
  success?: boolean;
};

export interface SignIn {
  email: string;
  password: string;
}

export type UserRole = (typeof UserRole)[keyof typeof UserRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  admin: 'admin',
  editor: 'editor',
  viewer: 'viewer',
} as const;

export interface Session {
  avatarId?: string;
  email: string;
  id: string;
  name: string;
  role: UserRole;
  userId: string;
}

export interface CreateUser {
  avatarId?: string;
  email: string;
  id: string;
  name: string;
  password: string;
  role: UserRole;
}

export interface User {
  avatarId?: string;
  email: string;
  id: string;
  name: string;
  role: UserRole;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Retrieves information about the current session, including user details and session ID.

 * @summary Get current session
 */
export const getSession = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<Session>({ url: `/session/me`, method: 'GET' }, options);
};

/**
 * Authenticates the user and returns session details.

 * @summary Sign in
 */
export const signIn = (signIn: BodyType<SignIn>, options?: SecondParameter<typeof createInstance>) => {
  return createInstance<Session>(
    { url: `/session/sign-in`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: signIn },
    options
  );
};

/**
 * Ends the current session for the authenticated user.

 * @summary Sign out
 */
export const signOut = (options?: SecondParameter<typeof createInstance>) => {
  return createInstance<void>({ url: `/session/sign-out`, method: 'POST' }, options);
};

export type GetSessionResult = NonNullable<Awaited<ReturnType<typeof getSession>>>;
export type SignInResult = NonNullable<Awaited<ReturnType<typeof signIn>>>;
export type SignOutResult = NonNullable<Awaited<ReturnType<typeof signOut>>>;
